// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wires

import (
	"github.com/aljrubior/amc-ui-rest-facade/clients/accessManagement"
	"github.com/aljrubior/amc-ui-rest-facade/clients/cloudhub"
	"github.com/aljrubior/amc-ui-rest-facade/clients/fabric"
	"github.com/aljrubior/amc-ui-rest-facade/clients/hybrid"
	"github.com/aljrubior/amc-ui-rest-facade/clients/runtimeFabricManagement"
	"github.com/aljrubior/amc-ui-rest-facade/config"
	"github.com/aljrubior/amc-ui-rest-facade/controllers/alert"
	"github.com/aljrubior/amc-ui-rest-facade/controllers/application"
	"github.com/aljrubior/amc-ui-rest-facade/controllers/permission"
	"github.com/aljrubior/amc-ui-rest-facade/controllers/server"
	"github.com/aljrubior/amc-ui-rest-facade/controllers/target"
	"github.com/aljrubior/amc-ui-rest-facade/controllers/user"
	"github.com/aljrubior/amc-ui-rest-facade/datasources/alerts"
	cloudhub3 "github.com/aljrubior/amc-ui-rest-facade/datasources/alerts/cloudhub"
	hybrid3 "github.com/aljrubior/amc-ui-rest-facade/datasources/alerts/hybrid"
	"github.com/aljrubior/amc-ui-rest-facade/datasources/applications"
	cloudhub4 "github.com/aljrubior/amc-ui-rest-facade/datasources/applications/cloudhub"
	fabric3 "github.com/aljrubior/amc-ui-rest-facade/datasources/applications/fabric"
	hybrid4 "github.com/aljrubior/amc-ui-rest-facade/datasources/applications/hybrid"
	"github.com/aljrubior/amc-ui-rest-facade/datasources/permissions"
	accessManagement3 "github.com/aljrubior/amc-ui-rest-facade/datasources/permissions/accessManagement"
	"github.com/aljrubior/amc-ui-rest-facade/datasources/targets"
	cloudhub5 "github.com/aljrubior/amc-ui-rest-facade/datasources/targets/cloudhub"
	hybrid5 "github.com/aljrubior/amc-ui-rest-facade/datasources/targets/hybrid"
	accessManagement2 "github.com/aljrubior/amc-ui-rest-facade/services/accessManagement"
	alert2 "github.com/aljrubior/amc-ui-rest-facade/services/alert"
	application2 "github.com/aljrubior/amc-ui-rest-facade/services/application"
	cloudhub2 "github.com/aljrubior/amc-ui-rest-facade/services/cloudhub"
	fabric2 "github.com/aljrubior/amc-ui-rest-facade/services/fabric"
	hybrid2 "github.com/aljrubior/amc-ui-rest-facade/services/hybrid"
	permission2 "github.com/aljrubior/amc-ui-rest-facade/services/permission"
	runtimeFabricManagement2 "github.com/aljrubior/amc-ui-rest-facade/services/runtimeFabricManagement"
	server2 "github.com/aljrubior/amc-ui-rest-facade/services/server"
	target2 "github.com/aljrubior/amc-ui-rest-facade/services/target"
)

// Injectors from InitializeTargetController.go:

func InitializeTargetController(datasources map[string]targets.Datasource) (target.Controller, error) {
	defaultService := target2.NewDefaultService(datasources)
	defaultController := target.NewDefaultController(defaultService)
	return defaultController, nil
}

// Injectors from initializeAlertController.go:

func InitializeAlertController(datasources map[string]alerts.Datasource) (alert.Controller, error) {
	defaultService := alert2.NewDefaultService(datasources)
	defaultController := alert.NewDefaultController(defaultService)
	return defaultController, nil
}

// Injectors from initializeApplicationController.go:

func InitializeApplicationController(datasources map[string]applications.Datasource) (application.Controller, error) {
	defaultService := application2.NewDefaultService(datasources)
	defaultController := application.NewDefaultController(defaultService)
	return defaultController, nil
}

// Injectors from initializeCloudhubAlertDatasource.go:

func InitializeCloudhubAlertDatasource(configClient config.CloudhubConfigClient) (alerts.Datasource, error) {
	defaultHttpClient := cloudhub.NewDefaultHttpClient(configClient)
	defaultService := cloudhub2.NewDefaultService(defaultHttpClient)
	defaultDatasource := cloudhub3.NewDefaultDatasource(defaultService)
	return defaultDatasource, nil
}

// Injectors from initializeCloudhubApplicationDatasource.go:

func InitializeCloudhubApplicationDatasource(configClient config.CloudhubConfigClient) (applications.Datasource, error) {
	defaultHttpClient := cloudhub.NewDefaultHttpClient(configClient)
	defaultService := cloudhub2.NewDefaultService(defaultHttpClient)
	defaultDatasource := cloudhub4.NewDefaultDatasource(defaultService)
	return defaultDatasource, nil
}

// Injectors from initializeCloudhubTargetDatasource.go:

func InitializeCloudhubTargetDatasource(configClient config.CloudhubConfigClient) (targets.Datasource, error) {
	defaultHttpClient := cloudhub.NewDefaultHttpClient(configClient)
	defaultService := cloudhub2.NewDefaultService(defaultHttpClient)
	datasource := cloudhub5.NewDatasource(defaultService)
	return datasource, nil
}

// Injectors from initializeFabricApplicationDatasource.go:

func InitializeFabricApplicationDatasource(fabricConfigClient config.FabricConfigClient, runtimeFabricManagementClientConfig config.RuntimeFabricManagementClientConfig) (applications.Datasource, error) {
	defaultHttpClient := fabric.NewDefaultHttpClient(fabricConfigClient)
	defaultService := fabric2.NewDefaultService(defaultHttpClient)
	runtimeFabricManagementDefaultHttpClient := runtimeFabricManagement.NewDefaultHttpClient(runtimeFabricManagementClientConfig)
	runtimeFabricManagementDefaultService := runtimeFabricManagement2.NewDefaultService(runtimeFabricManagementDefaultHttpClient)
	datasource := fabric3.NewDatasource(defaultService, runtimeFabricManagementDefaultService)
	return datasource, nil
}

// Injectors from initializeHybridAlertDatasource.go:

func InitializeHybridAlertDatasource(hybridConfigClient config.HybridConfigClient) (alerts.Datasource, error) {
	defaultHttpClient := hybrid.NewDefaultHttpClient(hybridConfigClient)
	defaultService := hybrid2.NewDefaultService(defaultHttpClient)
	defaultDatasource := hybrid3.NewDefaultDatasource(defaultService)
	return defaultDatasource, nil
}

// Injectors from initializeHybridApplicationDatasource.go:

func InitializeHybridApplicationDatasource(hybridConfigClient config.HybridConfigClient) (applications.Datasource, error) {
	defaultHttpClient := hybrid.NewDefaultHttpClient(hybridConfigClient)
	defaultService := hybrid2.NewDefaultService(defaultHttpClient)
	datasource := hybrid4.NewDatasource(defaultService)
	return datasource, nil
}

// Injectors from initializeHybridTargetDatasource.go:

func InitializeHybridTargetDatasource(hybridConfigClient config.HybridConfigClient) (targets.Datasource, error) {
	defaultHttpClient := hybrid.NewDefaultHttpClient(hybridConfigClient)
	defaultService := hybrid2.NewDefaultService(defaultHttpClient)
	datasource := hybrid5.NewDatasource(defaultService)
	return datasource, nil
}

// Injectors from initializePermissionController.go:

func InitializePermissionController(datasource permissions.Datasource) (permission.Controller, error) {
	defaultService := permission2.NewDefaultService(datasource)
	defaultController := permission.NewDefaultController(defaultService)
	return defaultController, nil
}

// Injectors from initializePermissionDatasource.go:

func InitializePermissionDatasource(accessManagementConfigClient config.AccessManagementConfigClient) (permissions.Datasource, error) {
	defaultHttpClient := accessManagement.NewDefaultHttpClient(accessManagementConfigClient)
	defaultService := accessManagement2.NewDefaultService(defaultHttpClient)
	defaultDatasource := accessManagement3.NewDefaultDatasource(defaultService)
	return defaultDatasource, nil
}

// Injectors from initializeServerController.go:

func InitializeServerController(datasources []targets.Datasource) (server.Controller, error) {
	defaultService := server2.NewDefaultService(datasources)
	defaultController := server.NewDefaultController(defaultService)
	return defaultController, nil
}

// Injectors from initializeUserController.go:

func InitializeUserController(coreServiceConfigClient config.AccessManagementConfigClient) (user.Controller, error) {
	defaultHttpClient := accessManagement.NewDefaultHttpClient(coreServiceConfigClient)
	defaultService := accessManagement2.NewDefaultService(defaultHttpClient)
	defaultController := user.NewDefaultController(defaultService)
	return defaultController, nil
}
