// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wires

import (
	"github.com/aljrubior/amc-ui-rest-facade/clients/cloudhub"
	"github.com/aljrubior/amc-ui-rest-facade/clients/fabric"
	"github.com/aljrubior/amc-ui-rest-facade/clients/hybrid"
	"github.com/aljrubior/amc-ui-rest-facade/clients/runtimeFabricManagement"
	"github.com/aljrubior/amc-ui-rest-facade/config"
	"github.com/aljrubior/amc-ui-rest-facade/controllers/application"
	"github.com/aljrubior/amc-ui-rest-facade/controllers/target"
	"github.com/aljrubior/amc-ui-rest-facade/datasources/applications"
	cloudhub3 "github.com/aljrubior/amc-ui-rest-facade/datasources/applications/cloudhub"
	fabric3 "github.com/aljrubior/amc-ui-rest-facade/datasources/applications/fabric"
	hybrid3 "github.com/aljrubior/amc-ui-rest-facade/datasources/applications/hybrid"
	"github.com/aljrubior/amc-ui-rest-facade/datasources/targets"
	cloudhub4 "github.com/aljrubior/amc-ui-rest-facade/datasources/targets/cloudhub"
	hybrid4 "github.com/aljrubior/amc-ui-rest-facade/datasources/targets/hybrid"
	application2 "github.com/aljrubior/amc-ui-rest-facade/services/application"
	cloudhub2 "github.com/aljrubior/amc-ui-rest-facade/services/cloudhub"
	fabric2 "github.com/aljrubior/amc-ui-rest-facade/services/fabric"
	hybrid2 "github.com/aljrubior/amc-ui-rest-facade/services/hybrid"
	runtimeFabricManagement2 "github.com/aljrubior/amc-ui-rest-facade/services/runtimeFabricManagement"
	target2 "github.com/aljrubior/amc-ui-rest-facade/services/target"
)

// Injectors from InitializeTargetController.go:

func InitializeTargetController(datasources []targets.TargetDatasource) (target.Controller, error) {
	defaultService := target2.NewDefaultService(datasources)
	defaultController := target.NewDefaultController(defaultService)
	return defaultController, nil
}

// Injectors from initializeApplicationController.go:

func InitializeApplicationController(datasources []applications.ApplicationDatasource) (application.Controller, error) {
	defaultService := application2.NewDefaultService(datasources)
	defaultController := application.NewDefaultController(defaultService)
	return defaultController, nil
}

// Injectors from initializeCloudhubApplicationDatasource.go:

func InitializeCloudhubApplicationDatasource(configClient config.CloudhubConfigClient) (applications.ApplicationDatasource, error) {
	defaultHttpClient := cloudhub.NewDefaultHttpClient(configClient)
	defaultService := cloudhub2.NewDefaultService(defaultHttpClient)
	datasource := cloudhub3.NewDatasource(defaultService)
	return datasource, nil
}

// Injectors from initializeCloudhubTargetDatasource.go:

func InitializeCloudhubTargetDatasource(configClient config.CloudhubConfigClient) (targets.TargetDatasource, error) {
	defaultHttpClient := cloudhub.NewDefaultHttpClient(configClient)
	defaultService := cloudhub2.NewDefaultService(defaultHttpClient)
	datasource := cloudhub4.NewDatasource(defaultService)
	return datasource, nil
}

// Injectors from initializeFabricApplicationDatasource.go:

func InitializeFabricApplicationDatasource(fabricConfigClient config.FabricConfigClient, runtimeFabricManagementClientConfig config.RuntimeFabricManagementClientConfig) (applications.ApplicationDatasource, error) {
	defaultHttpClient := fabric.NewDefaultHttpClient(fabricConfigClient)
	defaultService := fabric2.NewDefaultService(defaultHttpClient)
	runtimeFabricManagementDefaultHttpClient := runtimeFabricManagement.NewDefaultHttpClient(runtimeFabricManagementClientConfig)
	runtimeFabricManagementDefaultService := runtimeFabricManagement2.NewDefaultService(runtimeFabricManagementDefaultHttpClient)
	datasource := fabric3.NewDatasource(defaultService, runtimeFabricManagementDefaultService)
	return datasource, nil
}

// Injectors from initializeHybridApplicationDatasource.go:

func InitializeHybridApplicationDatasource(hybridConfigClient config.HybridConfigClient) (applications.ApplicationDatasource, error) {
	defaultHttpClient := hybrid.NewDefaultHttpClient(hybridConfigClient)
	defaultService := hybrid2.NewDefaultService(defaultHttpClient)
	datasource := hybrid3.NewDatasource(defaultService)
	return datasource, nil
}

// Injectors from initializeHybridTargetDatasource.go:

func InitializeHybridTargetDatasource(hybridConfigClient config.HybridConfigClient) (targets.TargetDatasource, error) {
	defaultHttpClient := hybrid.NewDefaultHttpClient(hybridConfigClient)
	defaultService := hybrid2.NewDefaultService(defaultHttpClient)
	datasource := hybrid4.NewDatasource(defaultService)
	return datasource, nil
}
